<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1318" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1301.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1301.00"> </text><svg id="frames" x="10" width="1180"><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (18 samples, 1.37%)</title><rect x="0.6865%" y="180" width="1.3730%" height="15" fill="rgb(227,0,7)"/><text x="0.9365%" y="190.50"></text></g><g><title>signature (inspect.py:3118) (17 samples, 1.30%)</title><rect x="0.7628%" y="196" width="1.2967%" height="15" fill="rgb(217,0,24)"/><text x="1.0128%" y="206.50"></text></g><g><title>from_callable (inspect.py:2867) (17 samples, 1.30%)</title><rect x="0.7628%" y="212" width="1.2967%" height="15" fill="rgb(221,193,54)"/><text x="1.0128%" y="222.50"></text></g><g><title>log_events (cyberbrain/frame.py:144) (25 samples, 1.91%)</title><rect x="0.6865%" y="164" width="1.9069%" height="15" fill="rgb(248,212,6)"/><text x="0.9365%" y="174.50">l..</text></g><g><title>update (cyberbrain/logger.py:151) (35 samples, 2.67%)</title><rect x="0.6102%" y="148" width="2.6697%" height="15" fill="rgb(208,68,35)"/><text x="0.8602%" y="158.50">up..</text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (64 samples, 4.88%)</title><rect x="0.4577%" y="132" width="4.8818%" height="15" fill="rgb(232,128,0)"/><text x="0.7077%" y="142.50">local_..</text></g><g><title>main (password.py:82) (71 samples, 5.42%)</title><rect x="0.0000%" y="116" width="5.4157%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="126.50">main (p..</text></g><g><title>local_tracer (cyberbrain/tracer.py:234) (26 samples, 1.98%)</title><rect x="6.1785%" y="132" width="1.9832%" height="15" fill="rgb(228,23,34)"/><text x="6.4285%" y="142.50">l..</text></g><g><title>_signature_from_function (inspect.py:2182) (22 samples, 1.68%)</title><rect x="13.4249%" y="260" width="1.6781%" height="15" fill="rgb(218,30,26)"/><text x="13.6749%" y="270.50"></text></g><g><title>__init__ (inspect.py:2835) (14 samples, 1.07%)</title><rect x="15.7132%" y="276" width="1.0679%" height="15" fill="rgb(220,122,19)"/><text x="15.9632%" y="286.50"></text></g><g><title>_signature_from_callable (inspect.py:2247) (88 samples, 6.71%)</title><rect x="10.3738%" y="228" width="6.7124%" height="15" fill="rgb(250,228,42)"/><text x="10.6238%" y="238.50">_signatur..</text></g><g><title>_signature_from_callable (inspect.py:2318) (61 samples, 4.65%)</title><rect x="12.4333%" y="244" width="4.6529%" height="15" fill="rgb(240,193,28)"/><text x="12.6833%" y="254.50">_sign..</text></g><g><title>_signature_from_function (inspect.py:2227) (22 samples, 1.68%)</title><rect x="15.4081%" y="260" width="1.6781%" height="15" fill="rgb(216,20,37)"/><text x="15.6581%" y="270.50"></text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (119 samples, 9.08%)</title><rect x="9.7635%" y="180" width="9.0770%" height="15" fill="rgb(206,188,39)"/><text x="10.0135%" y="190.50">emit_event_an..</text></g><g><title>signature (inspect.py:3118) (116 samples, 8.85%)</title><rect x="9.9924%" y="196" width="8.8482%" height="15" fill="rgb(217,207,13)"/><text x="10.2424%" y="206.50">signature (i..</text></g><g><title>from_callable (inspect.py:2867) (116 samples, 8.85%)</title><rect x="9.9924%" y="212" width="8.8482%" height="15" fill="rgb(231,73,38)"/><text x="10.2424%" y="222.50">from_callabl..</text></g><g><title>_signature_from_callable (inspect.py:2254) (23 samples, 1.75%)</title><rect x="17.0862%" y="228" width="1.7544%" height="15" fill="rgb(225,20,46)"/><text x="17.3362%" y="238.50"></text></g><g><title>_push (cyberbrain/value_stack.py:192) (17 samples, 1.30%)</title><rect x="19.8322%" y="228" width="1.2967%" height="15" fill="rgb(210,31,41)"/><text x="20.0822%" y="238.50"></text></g><g><title>_CALL_FUNCTION_handler (cyberbrain/value_stack.py:509) (30 samples, 2.29%)</title><rect x="19.5271%" y="196" width="2.2883%" height="15" fill="rgb(221,200,47)"/><text x="19.7771%" y="206.50">_..</text></g><g><title>_push_arguments_or_exception (cyberbrain/value_stack.py:504) (28 samples, 2.14%)</title><rect x="19.6796%" y="212" width="2.1358%" height="15" fill="rgb(226,26,5)"/><text x="19.9296%" y="222.50">_..</text></g><g><title>_CALL_METHOD_handler (cyberbrain/value_stack.py:530) (21 samples, 1.60%)</title><rect x="23.3410%" y="212" width="1.6018%" height="15" fill="rgb(249,33,26)"/><text x="23.5910%" y="222.50"></text></g><g><title>log_events (cyberbrain/frame.py:144) (216 samples, 16.48%)</title><rect x="9.3822%" y="164" width="16.4760%" height="15" fill="rgb(235,183,28)"/><text x="9.6322%" y="174.50">log_events (cyberbrain/fr..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:139) (88 samples, 6.71%)</title><rect x="19.1457%" y="180" width="6.7124%" height="15" fill="rgb(221,5,38)"/><text x="19.3957%" y="190.50">emit_even..</text></g><g><title>inner (cyberbrain/value_stack.py:63) (34 samples, 2.59%)</title><rect x="23.2647%" y="196" width="2.5934%" height="15" fill="rgb(247,18,42)"/><text x="23.5147%" y="206.50">in..</text></g><g><title>update (cyberbrain/logger.py:151) (260 samples, 19.83%)</title><rect x="9.3059%" y="148" width="19.8322%" height="15" fill="rgb(241,131,45)"/><text x="9.5559%" y="158.50">update (cyberbrain/logger.py:15..</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (36 samples, 2.75%)</title><rect x="29.6720%" y="164" width="2.7460%" height="15" fill="rgb(249,31,29)"/><text x="29.9220%" y="174.50">&lt;l..</text></g><g><title>__init__ (crayons.py:54) (22 samples, 1.68%)</title><rect x="30.7399%" y="180" width="1.6781%" height="15" fill="rgb(225,111,53)"/><text x="30.9899%" y="190.50"></text></g><g><title>get (_collections_abc.py:678) (16 samples, 1.22%)</title><rect x="31.1976%" y="196" width="1.2204%" height="15" fill="rgb(238,160,17)"/><text x="31.4476%" y="206.50"></text></g><g><title>__unicode__ (crayons.py:95) (23 samples, 1.75%)</title><rect x="32.4180%" y="164" width="1.7544%" height="15" fill="rgb(214,148,48)"/><text x="32.6680%" y="174.50"></text></g><g><title>update (cyberbrain/logger.py:155) (62 samples, 4.73%)</title><rect x="29.5195%" y="148" width="4.7292%" height="15" fill="rgb(232,36,49)"/><text x="29.7695%" y="158.50">update..</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (29 samples, 2.21%)</title><rect x="35.0877%" y="164" width="2.2121%" height="15" fill="rgb(209,103,24)"/><text x="35.3377%" y="174.50">&lt;..</text></g><g><title>__init__ (crayons.py:54) (16 samples, 1.22%)</title><rect x="36.0793%" y="180" width="1.2204%" height="15" fill="rgb(229,88,8)"/><text x="36.3293%" y="190.50"></text></g><g><title>get (_collections_abc.py:678) (15 samples, 1.14%)</title><rect x="36.1556%" y="196" width="1.1442%" height="15" fill="rgb(213,181,19)"/><text x="36.4056%" y="206.50"></text></g><g><title>__unicode__ (crayons.py:95) (17 samples, 1.30%)</title><rect x="37.2998%" y="164" width="1.2967%" height="15" fill="rgb(254,191,54)"/><text x="37.5498%" y="174.50"></text></g><g><title>update (cyberbrain/logger.py:159) (54 samples, 4.12%)</title><rect x="34.5538%" y="148" width="4.1190%" height="15" fill="rgb(241,83,37)"/><text x="34.8038%" y="158.50">upda..</text></g><g><title>should_ignore_event (cyberbrain/utils.py:51) (15 samples, 1.14%)</title><rect x="39.5881%" y="180" width="1.1442%" height="15" fill="rgb(233,36,39)"/><text x="39.8381%" y="190.50"></text></g><g><title>log_initial_value_events (cyberbrain/frame.py:125) (17 samples, 1.30%)</title><rect x="39.5118%" y="164" width="1.2967%" height="15" fill="rgb(226,3,54)"/><text x="39.7618%" y="174.50"></text></g><g><title>update (cyberbrain/logger.py:203) (32 samples, 2.44%)</title><rect x="38.8253%" y="148" width="2.4409%" height="15" fill="rgb(245,192,40)"/><text x="39.0753%" y="158.50">up..</text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (435 samples, 33.18%)</title><rect x="8.1617%" y="132" width="33.1808%" height="15" fill="rgb(238,167,29)"/><text x="8.4117%" y="142.50">local_tracer (cyberbrain/tracer.py:238)</text></g><g><title>main (password.py:83) (473 samples, 36.08%)</title><rect x="5.4157%" y="116" width="36.0793%" height="15" fill="rgb(232,182,51)"/><text x="5.6657%" y="126.50">main (password.py:83)</text></g><g><title>local_tracer (cyberbrain/tracer.py:234) (21 samples, 1.60%)</title><rect x="41.5713%" y="132" width="1.6018%" height="15" fill="rgb(231,60,39)"/><text x="41.8213%" y="142.50"></text></g><g><title>_signature_from_function (inspect.py:2182) (15 samples, 1.14%)</title><rect x="46.6819%" y="260" width="1.1442%" height="15" fill="rgb(208,69,12)"/><text x="46.9319%" y="270.50"></text></g><g><title>_signature_from_callable (inspect.py:2247) (54 samples, 4.12%)</title><rect x="44.6224%" y="228" width="4.1190%" height="15" fill="rgb(235,93,37)"/><text x="44.8724%" y="238.50">_sig..</text></g><g><title>_signature_from_callable (inspect.py:2318) (33 samples, 2.52%)</title><rect x="46.2243%" y="244" width="2.5172%" height="15" fill="rgb(213,116,39)"/><text x="46.4743%" y="254.50">_s..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (65 samples, 4.96%)</title><rect x="44.3173%" y="180" width="4.9580%" height="15" fill="rgb(222,207,29)"/><text x="44.5673%" y="190.50">emit_e..</text></g><g><title>signature (inspect.py:3118) (63 samples, 4.81%)</title><rect x="44.4699%" y="196" width="4.8055%" height="15" fill="rgb(206,96,30)"/><text x="44.7199%" y="206.50">signat..</text></g><g><title>from_callable (inspect.py:2867) (63 samples, 4.81%)</title><rect x="44.4699%" y="212" width="4.8055%" height="15" fill="rgb(218,138,4)"/><text x="44.7199%" y="222.50">from_c..</text></g><g><title>_CALL_METHOD_handler (cyberbrain/value_stack.py:530) (17 samples, 1.30%)</title><rect x="50.1144%" y="212" width="1.2967%" height="15" fill="rgb(250,191,14)"/><text x="50.3644%" y="222.50"></text></g><g><title>log_events (cyberbrain/frame.py:144) (104 samples, 7.93%)</title><rect x="43.9359%" y="164" width="7.9329%" height="15" fill="rgb(239,60,40)"/><text x="44.1859%" y="174.50">log_events ..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:139) (33 samples, 2.52%)</title><rect x="49.3516%" y="180" width="2.5172%" height="15" fill="rgb(206,27,48)"/><text x="49.6016%" y="190.50">em..</text></g><g><title>inner (cyberbrain/value_stack.py:63) (26 samples, 1.98%)</title><rect x="49.8856%" y="196" width="1.9832%" height="15" fill="rgb(225,35,8)"/><text x="50.1356%" y="206.50">i..</text></g><g><title>encode (jsonpickle/pickler.py:128) (37 samples, 2.82%)</title><rect x="52.4027%" y="196" width="2.8223%" height="15" fill="rgb(250,213,24)"/><text x="52.6527%" y="206.50">en..</text></g><g><title>encode (jsonpickle/backend.py:171) (33 samples, 2.52%)</title><rect x="52.7079%" y="212" width="2.5172%" height="15" fill="rgb(247,123,22)"/><text x="52.9579%" y="222.50">en..</text></g><g><title>backend_encode (jsonpickle/backend.py:189) (33 samples, 2.52%)</title><rect x="52.7079%" y="228" width="2.5172%" height="15" fill="rgb(231,138,38)"/><text x="52.9579%" y="238.50">ba..</text></g><g><title>dumps (json/__init__.py:231) (32 samples, 2.44%)</title><rect x="52.7841%" y="244" width="2.4409%" height="15" fill="rgb(231,145,46)"/><text x="53.0341%" y="254.50">du..</text></g><g><title>encode (json/encoder.py:199) (32 samples, 2.44%)</title><rect x="52.7841%" y="260" width="2.4409%" height="15" fill="rgb(251,118,11)"/><text x="53.0341%" y="270.50">en..</text></g><g><title>iterencode (json/encoder.py:257) (31 samples, 2.36%)</title><rect x="52.8604%" y="276" width="2.3646%" height="15" fill="rgb(217,147,25)"/><text x="53.1104%" y="286.50">it..</text></g><g><title>_flatten (jsonpickle/pickler.py:263) (31 samples, 2.36%)</title><rect x="58.1236%" y="292" width="2.3646%" height="15" fill="rgb(247,81,37)"/><text x="58.3736%" y="302.50">_f..</text></g><g><title>_flatten (jsonpickle/pickler.py:266) (51 samples, 3.89%)</title><rect x="60.4882%" y="292" width="3.8902%" height="15" fill="rgb(209,12,38)"/><text x="60.7382%" y="302.50">_fla..</text></g><g><title>is_primitive (jsonpickle/util.py:131) (24 samples, 1.83%)</title><rect x="62.5477%" y="308" width="1.8307%" height="15" fill="rgb(227,1,9)"/><text x="62.7977%" y="318.50">i..</text></g><g><title>log_events (cyberbrain/frame.py:157) (162 samples, 12.36%)</title><rect x="52.2502%" y="164" width="12.3570%" height="15" fill="rgb(248,47,43)"/><text x="52.5002%" y="174.50">log_events (cyberb..</text></g><g><title>to_json (cyberbrain/utils.py:95) (161 samples, 12.28%)</title><rect x="52.3265%" y="180" width="12.2807%" height="15" fill="rgb(221,10,30)"/><text x="52.5765%" y="190.50">to_json (cyberbrai..</text></g><g><title>encode (jsonpickle/pickler.py:129) (123 samples, 9.38%)</title><rect x="55.2250%" y="196" width="9.3822%" height="15" fill="rgb(210,229,1)"/><text x="55.4750%" y="206.50">encode (jsonp..</text></g><g><title>flatten (jsonpickle/pickler.py:253) (123 samples, 9.38%)</title><rect x="55.2250%" y="212" width="9.3822%" height="15" fill="rgb(222,148,37)"/><text x="55.4750%" y="222.50">flatten (json..</text></g><g><title>_flatten (jsonpickle/pickler.py:275) (123 samples, 9.38%)</title><rect x="55.2250%" y="228" width="9.3822%" height="15" fill="rgb(234,67,33)"/><text x="55.4750%" y="238.50">_flatten (jso..</text></g><g><title>_flatten_obj (jsonpickle/pickler.py:298) (122 samples, 9.31%)</title><rect x="55.3013%" y="244" width="9.3059%" height="15" fill="rgb(247,98,35)"/><text x="55.5513%" y="254.50">_flatten_obj ..</text></g><g><title>_list_recurse (jsonpickle/pickler.py:309) (122 samples, 9.31%)</title><rect x="55.3013%" y="260" width="9.3059%" height="15" fill="rgb(247,138,52)"/><text x="55.5513%" y="270.50">_list_recurse..</text></g><g><title>&lt;listcomp&gt; (jsonpickle/pickler.py:309) (122 samples, 9.31%)</title><rect x="55.3013%" y="276" width="9.3059%" height="15" fill="rgb(213,79,30)"/><text x="55.5513%" y="286.50">&lt;listcomp&gt; (j..</text></g><g><title>update (cyberbrain/logger.py:151) (298 samples, 22.73%)</title><rect x="43.8596%" y="148" width="22.7307%" height="15" fill="rgb(246,177,23)"/><text x="44.1096%" y="158.50">update (cyberbrain/logger.py:151)</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (18 samples, 1.37%)</title><rect x="66.8192%" y="164" width="1.3730%" height="15" fill="rgb(230,62,27)"/><text x="67.0692%" y="174.50"></text></g><g><title>update (cyberbrain/logger.py:155) (31 samples, 2.36%)</title><rect x="66.6667%" y="148" width="2.3646%" height="15" fill="rgb(216,154,8)"/><text x="66.9167%" y="158.50">up..</text></g><g><title>update (cyberbrain/logger.py:159) (21 samples, 1.60%)</title><rect x="69.2601%" y="148" width="1.6018%" height="15" fill="rgb(244,35,45)"/><text x="69.5101%" y="158.50"></text></g><g><title>update (cyberbrain/logger.py:203) (20 samples, 1.53%)</title><rect x="70.9382%" y="148" width="1.5256%" height="15" fill="rgb(251,115,12)"/><text x="71.1882%" y="158.50"></text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (386 samples, 29.44%)</title><rect x="43.1732%" y="132" width="29.4432%" height="15" fill="rgb(240,54,50)"/><text x="43.4232%" y="142.50">local_tracer (cyberbrain/tracer.py:238)</text></g><g><title>main (password.py:84) (409 samples, 31.20%)</title><rect x="41.4950%" y="116" width="31.1976%" height="15" fill="rgb(233,84,52)"/><text x="41.7450%" y="126.50">main (password.py:84)</text></g><g><title>wrapper (cyberbrain/tracer.py:186) (954 samples, 72.77%)</title><rect x="0.0000%" y="100" width="72.7689%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="110.50">wrapper (cyberbrain/tracer.py:186)</text></g><g><title>_transform_event_to_proto (cyberbrain/rpc_client.py:40) (24 samples, 1.83%)</title><rect x="74.2182%" y="148" width="1.8307%" height="15" fill="rgb(249,43,39)"/><text x="74.4682%" y="158.50">_..</text></g><g><title>_transform_event_to_proto (cyberbrain/rpc_client.py:93) (18 samples, 1.37%)</title><rect x="78.3371%" y="148" width="1.3730%" height="15" fill="rgb(209,38,44)"/><text x="78.5871%" y="158.50"></text></g><g><title>MakeSubMessageDefault (protobuf/internal/python_message.py:465) (19 samples, 1.45%)</title><rect x="80.1678%" y="196" width="1.4493%" height="15" fill="rgb(236,212,23)"/><text x="80.4178%" y="206.50"></text></g><g><title>init (protobuf/internal/python_message.py:526) (17 samples, 1.30%)</title><rect x="80.3204%" y="212" width="1.2967%" height="15" fill="rgb(242,79,21)"/><text x="80.5704%" y="222.50"></text></g><g><title>MergeFrom (protobuf/internal/python_message.py:1342) (21 samples, 1.60%)</title><rect x="80.1678%" y="180" width="1.6018%" height="15" fill="rgb(211,96,35)"/><text x="80.4178%" y="190.50"></text></g><g><title>append (protobuf/internal/containers.py:388) (33 samples, 2.52%)</title><rect x="80.0153%" y="148" width="2.5172%" height="15" fill="rgb(253,215,40)"/><text x="80.2653%" y="158.50">ap..</text></g><g><title>CopyFrom (protobuf/message.py:129) (32 samples, 2.44%)</title><rect x="80.0915%" y="164" width="2.4409%" height="15" fill="rgb(211,81,21)"/><text x="80.3415%" y="174.50">Co..</text></g><g><title>send_frame (cyberbrain/rpc_client.py:191) (134 samples, 10.22%)</title><rect x="72.7689%" y="132" width="10.2212%" height="15" fill="rgb(208,190,38)"/><text x="73.0189%" y="142.50">send_frame (cyb..</text></g><g><title>ByteSize (protobuf/internal/python_message.py:1076) (17 samples, 1.30%)</title><rect x="88.7109%" y="308" width="1.2967%" height="15" fill="rgb(235,213,38)"/><text x="88.9609%" y="318.50"></text></g><g><title>FieldSize (protobuf/internal/encoder.py:308) (17 samples, 1.30%)</title><rect x="88.7109%" y="324" width="1.2967%" height="15" fill="rgb(237,122,38)"/><text x="88.9609%" y="334.50"></text></g><g><title>EncodeRepeatedField (protobuf/internal/encoder.py:762) (33 samples, 2.52%)</title><rect x="87.6430%" y="292" width="2.5172%" height="15" fill="rgb(244,218,35)"/><text x="87.8930%" y="302.50">En..</text></g><g><title>_blocking (grpc/_channel.py:801) (99 samples, 7.55%)</title><rect x="85.3547%" y="164" width="7.5515%" height="15" fill="rgb(240,68,47)"/><text x="85.6047%" y="174.50">_blocking ..</text></g><g><title>_prepare (grpc/_channel.py:778) (99 samples, 7.55%)</title><rect x="85.3547%" y="180" width="7.5515%" height="15" fill="rgb(210,16,53)"/><text x="85.6047%" y="190.50">_prepare (..</text></g><g><title>_start_unary_request (grpc/_channel.py:711) (99 samples, 7.55%)</title><rect x="85.3547%" y="196" width="7.5515%" height="15" fill="rgb(235,124,12)"/><text x="85.6047%" y="206.50">_start_una..</text></g><g><title>serialize (grpc/_common.py:93) (99 samples, 7.55%)</title><rect x="85.3547%" y="212" width="7.5515%" height="15" fill="rgb(224,169,11)"/><text x="85.6047%" y="222.50">serialize ..</text></g><g><title>_transform (grpc/_common.py:86) (99 samples, 7.55%)</title><rect x="85.3547%" y="228" width="7.5515%" height="15" fill="rgb(250,166,2)"/><text x="85.6047%" y="238.50">_transform..</text></g><g><title>SerializeToString (protobuf/internal/python_message.py:1097) (90 samples, 6.86%)</title><rect x="86.0412%" y="244" width="6.8650%" height="15" fill="rgb(242,216,29)"/><text x="86.2912%" y="254.50">Serialize..</text></g><g><title>SerializePartialToString (protobuf/internal/python_message.py:1106) (90 samples, 6.86%)</title><rect x="86.0412%" y="260" width="6.8650%" height="15" fill="rgb(230,116,27)"/><text x="86.2912%" y="270.50">Serialize..</text></g><g><title>InternalSerialize (protobuf/internal/python_message.py:1126) (90 samples, 6.86%)</title><rect x="86.0412%" y="276" width="6.8650%" height="15" fill="rgb(228,99,48)"/><text x="86.2912%" y="286.50">InternalS..</text></g><g><title>EncodeRepeatedField (protobuf/internal/encoder.py:763) (36 samples, 2.75%)</title><rect x="90.1602%" y="292" width="2.7460%" height="15" fill="rgb(253,11,6)"/><text x="90.4102%" y="302.50">En..</text></g><g><title>InternalSerialize (protobuf/internal/python_message.py:1126) (29 samples, 2.21%)</title><rect x="90.6941%" y="308" width="2.2121%" height="15" fill="rgb(247,143,39)"/><text x="90.9441%" y="318.50">I..</text></g><g><title>EncodeField (protobuf/internal/encoder.py:769) (26 samples, 1.98%)</title><rect x="90.9230%" y="324" width="1.9832%" height="15" fill="rgb(236,97,10)"/><text x="91.1730%" y="334.50">E..</text></g><g><title>InternalSerialize (protobuf/internal/python_message.py:1126) (17 samples, 1.30%)</title><rect x="91.6095%" y="340" width="1.2967%" height="15" fill="rgb(233,208,19)"/><text x="91.8595%" y="350.50"></text></g><g><title>&lt;module&gt; (password.py:120) (1,221 samples, 93.14%)</title><rect x="0.0000%" y="84" width="93.1350%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="94.50">&lt;module&gt; (password.py:120)</text></g><g><title>wrapper (cyberbrain/tracer.py:195) (267 samples, 20.37%)</title><rect x="72.7689%" y="100" width="20.3661%" height="15" fill="rgb(220,129,5)"/><text x="73.0189%" y="110.50">wrapper (cyberbrain/tracer.py:19..</text></g><g><title>stop (cyberbrain/tracer.py:145) (267 samples, 20.37%)</title><rect x="72.7689%" y="116" width="20.3661%" height="15" fill="rgb(242,17,10)"/><text x="73.0189%" y="126.50">stop (cyberbrain/tracer.py:145)</text></g><g><title>send_frame (cyberbrain/rpc_client.py:197) (102 samples, 7.78%)</title><rect x="85.3547%" y="132" width="7.7803%" height="15" fill="rgb(242,107,0)"/><text x="85.6047%" y="142.50">send_frame ..</text></g><g><title>__call__ (grpc/_channel.py:824) (102 samples, 7.78%)</title><rect x="85.3547%" y="148" width="7.7803%" height="15" fill="rgb(251,28,31)"/><text x="85.6047%" y="158.50">__call__ (g..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:11) (20 samples, 1.53%)</title><rect x="94.0503%" y="900" width="1.5256%" height="15" fill="rgb(233,223,10)"/><text x="94.3003%" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (20 samples, 1.53%)</title><rect x="94.0503%" y="916" width="1.5256%" height="15" fill="rgb(215,21,27)"/><text x="94.3003%" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (20 samples, 1.53%)</title><rect x="94.0503%" y="932" width="1.5256%" height="15" fill="rgb(232,23,21)"/><text x="94.3003%" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (20 samples, 1.53%)</title><rect x="94.0503%" y="948" width="1.5256%" height="15" fill="rgb(244,5,23)"/><text x="94.3003%" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (20 samples, 1.53%)</title><rect x="94.0503%" y="964" width="1.5256%" height="15" fill="rgb(226,81,46)"/><text x="94.3003%" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (20 samples, 1.53%)</title><rect x="94.0503%" y="980" width="1.5256%" height="15" fill="rgb(247,70,30)"/><text x="94.3003%" y="990.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:57) (15 samples, 1.14%)</title><rect x="97.1014%" y="1188" width="1.1442%" height="15" fill="rgb(212,68,19)"/><text x="97.3514%" y="1198.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (15 samples, 1.14%)</title><rect x="97.1014%" y="1204" width="1.1442%" height="15" fill="rgb(240,187,13)"/><text x="97.3514%" y="1214.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (15 samples, 1.14%)</title><rect x="97.1014%" y="1220" width="1.1442%" height="15" fill="rgb(223,113,26)"/><text x="97.3514%" y="1230.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (15 samples, 1.14%)</title><rect x="97.1014%" y="1236" width="1.1442%" height="15" fill="rgb(206,192,2)"/><text x="97.3514%" y="1246.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (15 samples, 1.14%)</title><rect x="97.1014%" y="1252" width="1.1442%" height="15" fill="rgb(241,108,4)"/><text x="97.3514%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (15 samples, 1.14%)</title><rect x="97.1014%" y="1268" width="1.1442%" height="15" fill="rgb(247,173,49)"/><text x="97.3514%" y="1278.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:29) (21 samples, 1.60%)</title><rect x="97.1014%" y="996" width="1.6018%" height="15" fill="rgb(224,114,35)"/><text x="97.3514%" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (21 samples, 1.60%)</title><rect x="97.1014%" y="1012" width="1.6018%" height="15" fill="rgb(245,159,27)"/><text x="97.3514%" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (21 samples, 1.60%)</title><rect x="97.1014%" y="1028" width="1.6018%" height="15" fill="rgb(245,172,44)"/><text x="97.3514%" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (21 samples, 1.60%)</title><rect x="97.1014%" y="1044" width="1.6018%" height="15" fill="rgb(236,23,11)"/><text x="97.3514%" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (21 samples, 1.60%)</title><rect x="97.1014%" y="1060" width="1.6018%" height="15" fill="rgb(205,117,38)"/><text x="97.3514%" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (21 samples, 1.60%)</title><rect x="97.1014%" y="1076" width="1.6018%" height="15" fill="rgb(237,72,25)"/><text x="97.3514%" y="1086.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (21 samples, 1.60%)</title><rect x="97.1014%" y="1092" width="1.6018%" height="15" fill="rgb(244,70,9)"/><text x="97.3514%" y="1102.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (21 samples, 1.60%)</title><rect x="97.1014%" y="1108" width="1.6018%" height="15" fill="rgb(217,125,39)"/><text x="97.3514%" y="1118.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (21 samples, 1.60%)</title><rect x="97.1014%" y="1124" width="1.6018%" height="15" fill="rgb(235,36,10)"/><text x="97.3514%" y="1134.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (21 samples, 1.60%)</title><rect x="97.1014%" y="1140" width="1.6018%" height="15" fill="rgb(251,123,47)"/><text x="97.3514%" y="1150.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (21 samples, 1.60%)</title><rect x="97.1014%" y="1156" width="1.6018%" height="15" fill="rgb(221,13,13)"/><text x="97.3514%" y="1166.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (21 samples, 1.60%)</title><rect x="97.1014%" y="1172" width="1.6018%" height="15" fill="rgb(238,131,9)"/><text x="97.3514%" y="1182.50"></text></g><g><title>&lt;module&gt; (cyberbrain/utils.py:20) (63 samples, 4.81%)</title><rect x="93.9741%" y="532" width="4.8055%" height="15" fill="rgb(211,50,8)"/><text x="94.2241%" y="542.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (63 samples, 4.81%)</title><rect x="93.9741%" y="548" width="4.8055%" height="15" fill="rgb(245,182,24)"/><text x="94.2241%" y="558.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (63 samples, 4.81%)</title><rect x="93.9741%" y="564" width="4.8055%" height="15" fill="rgb(242,14,37)"/><text x="94.2241%" y="574.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (63 samples, 4.81%)</title><rect x="93.9741%" y="580" width="4.8055%" height="15" fill="rgb(246,228,12)"/><text x="94.2241%" y="590.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (63 samples, 4.81%)</title><rect x="93.9741%" y="596" width="4.8055%" height="15" fill="rgb(213,55,15)"/><text x="94.2241%" y="606.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (63 samples, 4.81%)</title><rect x="93.9741%" y="612" width="4.8055%" height="15" fill="rgb(209,9,3)"/><text x="94.2241%" y="622.50">_call_..</text></g><g><title>&lt;module&gt; (cheap_repr/__init__.py:94) (62 samples, 4.73%)</title><rect x="94.0503%" y="628" width="4.7292%" height="15" fill="rgb(230,59,30)"/><text x="94.3003%" y="638.50">&lt;modul..</text></g><g><title>try_register_repr (cheap_repr/__init__.py:57) (62 samples, 4.73%)</title><rect x="94.0503%" y="644" width="4.7292%" height="15" fill="rgb(209,121,21)"/><text x="94.3003%" y="654.50">try_re..</text></g><g><title>import_module (importlib/__init__.py:127) (62 samples, 4.73%)</title><rect x="94.0503%" y="660" width="4.7292%" height="15" fill="rgb(220,109,13)"/><text x="94.3003%" y="670.50">import..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (62 samples, 4.73%)</title><rect x="94.0503%" y="676" width="4.7292%" height="15" fill="rgb(232,18,1)"/><text x="94.3003%" y="686.50">_gcd_i..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (62 samples, 4.73%)</title><rect x="94.0503%" y="692" width="4.7292%" height="15" fill="rgb(215,41,42)"/><text x="94.3003%" y="702.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:972) (62 samples, 4.73%)</title><rect x="94.0503%" y="708" width="4.7292%" height="15" fill="rgb(224,123,36)"/><text x="94.3003%" y="718.50">_find_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (62 samples, 4.73%)</title><rect x="94.0503%" y="724" width="4.7292%" height="15" fill="rgb(240,125,3)"/><text x="94.3003%" y="734.50">_call_..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (62 samples, 4.73%)</title><rect x="94.0503%" y="740" width="4.7292%" height="15" fill="rgb(205,98,50)"/><text x="94.3003%" y="750.50">_gcd_i..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (62 samples, 4.73%)</title><rect x="94.0503%" y="756" width="4.7292%" height="15" fill="rgb(205,185,37)"/><text x="94.3003%" y="766.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:972) (62 samples, 4.73%)</title><rect x="94.0503%" y="772" width="4.7292%" height="15" fill="rgb(238,207,15)"/><text x="94.3003%" y="782.50">_find_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (62 samples, 4.73%)</title><rect x="94.0503%" y="788" width="4.7292%" height="15" fill="rgb(213,199,42)"/><text x="94.3003%" y="798.50">_call_..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (62 samples, 4.73%)</title><rect x="94.0503%" y="804" width="4.7292%" height="15" fill="rgb(235,201,11)"/><text x="94.3003%" y="814.50">_gcd_i..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (62 samples, 4.73%)</title><rect x="94.0503%" y="820" width="4.7292%" height="15" fill="rgb(207,46,11)"/><text x="94.3003%" y="830.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (62 samples, 4.73%)</title><rect x="94.0503%" y="836" width="4.7292%" height="15" fill="rgb(241,35,35)"/><text x="94.3003%" y="846.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (62 samples, 4.73%)</title><rect x="94.0503%" y="852" width="4.7292%" height="15" fill="rgb(243,32,47)"/><text x="94.3003%" y="862.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (62 samples, 4.73%)</title><rect x="94.0503%" y="868" width="4.7292%" height="15" fill="rgb(247,202,23)"/><text x="94.3003%" y="878.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (62 samples, 4.73%)</title><rect x="94.0503%" y="884" width="4.7292%" height="15" fill="rgb(219,102,11)"/><text x="94.3003%" y="894.50">_call_..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:52) (28 samples, 2.14%)</title><rect x="96.6438%" y="900" width="2.1358%" height="15" fill="rgb(243,110,44)"/><text x="96.8938%" y="910.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (28 samples, 2.14%)</title><rect x="96.6438%" y="916" width="2.1358%" height="15" fill="rgb(222,74,54)"/><text x="96.8938%" y="926.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (28 samples, 2.14%)</title><rect x="96.6438%" y="932" width="2.1358%" height="15" fill="rgb(216,99,12)"/><text x="96.8938%" y="942.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (28 samples, 2.14%)</title><rect x="96.6438%" y="948" width="2.1358%" height="15" fill="rgb(226,22,26)"/><text x="96.8938%" y="958.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (28 samples, 2.14%)</title><rect x="96.6438%" y="964" width="2.1358%" height="15" fill="rgb(217,163,10)"/><text x="96.8938%" y="974.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (28 samples, 2.14%)</title><rect x="96.6438%" y="980" width="2.1358%" height="15" fill="rgb(213,25,53)"/><text x="96.8938%" y="990.50">_..</text></g><g><title>&lt;module&gt; (cyberbrain/logger.py:10) (64 samples, 4.88%)</title><rect x="93.9741%" y="404" width="4.8818%" height="15" fill="rgb(252,105,26)"/><text x="94.2241%" y="414.50">&lt;modul..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (64 samples, 4.88%)</title><rect x="93.9741%" y="420" width="4.8818%" height="15" fill="rgb(220,39,43)"/><text x="94.2241%" y="430.50">_handl..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (64 samples, 4.88%)</title><rect x="93.9741%" y="436" width="4.8818%" height="15" fill="rgb(229,68,48)"/><text x="94.2241%" y="446.50">_call_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (64 samples, 4.88%)</title><rect x="93.9741%" y="452" width="4.8818%" height="15" fill="rgb(252,8,32)"/><text x="94.2241%" y="462.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (64 samples, 4.88%)</title><rect x="93.9741%" y="468" width="4.8818%" height="15" fill="rgb(223,20,43)"/><text x="94.2241%" y="478.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (64 samples, 4.88%)</title><rect x="93.9741%" y="484" width="4.8818%" height="15" fill="rgb(229,81,49)"/><text x="94.2241%" y="494.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (64 samples, 4.88%)</title><rect x="93.9741%" y="500" width="4.8818%" height="15" fill="rgb(236,28,36)"/><text x="94.2241%" y="510.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (64 samples, 4.88%)</title><rect x="93.9741%" y="516" width="4.8818%" height="15" fill="rgb(249,185,26)"/><text x="94.2241%" y="526.50">_call_..</text></g><g><title>all (1,311 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="46.50"></text></g><g><title>_run_module_as_main (runpy.py:197) (1,311 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="62.50">_run_module_as_main (runpy.py:197)</text></g><g><title>_run_code (runpy.py:87) (1,311 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="78.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (password.py:9) (90 samples, 6.86%)</title><rect x="93.1350%" y="84" width="6.8650%" height="15" fill="rgb(250,127,30)"/><text x="93.3850%" y="94.50">&lt;module&gt; ..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (90 samples, 6.86%)</title><rect x="93.1350%" y="100" width="6.8650%" height="15" fill="rgb(230,49,44)"/><text x="93.3850%" y="110.50">_find_and..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (90 samples, 6.86%)</title><rect x="93.1350%" y="116" width="6.8650%" height="15" fill="rgb(229,67,23)"/><text x="93.3850%" y="126.50">_find_and..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (90 samples, 6.86%)</title><rect x="93.1350%" y="132" width="6.8650%" height="15" fill="rgb(249,83,47)"/><text x="93.3850%" y="142.50">_load_unl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (90 samples, 6.86%)</title><rect x="93.1350%" y="148" width="6.8650%" height="15" fill="rgb(215,43,3)"/><text x="93.3850%" y="158.50">exec_modu..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (90 samples, 6.86%)</title><rect x="93.1350%" y="164" width="6.8650%" height="15" fill="rgb(238,154,13)"/><text x="93.3850%" y="174.50">_call_wit..</text></g><g><title>&lt;module&gt; (cyberbrain/__init__.py:2) (89 samples, 6.79%)</title><rect x="93.2113%" y="180" width="6.7887%" height="15" fill="rgb(219,56,2)"/><text x="93.4613%" y="190.50">&lt;module&gt; ..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (89 samples, 6.79%)</title><rect x="93.2113%" y="196" width="6.7887%" height="15" fill="rgb(233,0,4)"/><text x="93.4613%" y="206.50">_find_and..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (89 samples, 6.79%)</title><rect x="93.2113%" y="212" width="6.7887%" height="15" fill="rgb(235,30,7)"/><text x="93.4613%" y="222.50">_find_and..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (89 samples, 6.79%)</title><rect x="93.2113%" y="228" width="6.7887%" height="15" fill="rgb(250,79,13)"/><text x="93.4613%" y="238.50">_load_unl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (89 samples, 6.79%)</title><rect x="93.2113%" y="244" width="6.7887%" height="15" fill="rgb(211,146,34)"/><text x="93.4613%" y="254.50">exec_modu..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (89 samples, 6.79%)</title><rect x="93.2113%" y="260" width="6.7887%" height="15" fill="rgb(228,22,38)"/><text x="93.4613%" y="270.50">_call_wit..</text></g><g><title>&lt;module&gt; (cyberbrain/tracer.py:13) (79 samples, 6.03%)</title><rect x="93.9741%" y="276" width="6.0259%" height="15" fill="rgb(235,168,5)"/><text x="94.2241%" y="286.50">&lt;module&gt;..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (79 samples, 6.03%)</title><rect x="93.9741%" y="292" width="6.0259%" height="15" fill="rgb(221,155,16)"/><text x="94.2241%" y="302.50">_handle_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (79 samples, 6.03%)</title><rect x="93.9741%" y="308" width="6.0259%" height="15" fill="rgb(215,215,53)"/><text x="94.2241%" y="318.50">_call_wi..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (79 samples, 6.03%)</title><rect x="93.9741%" y="324" width="6.0259%" height="15" fill="rgb(223,4,10)"/><text x="94.2241%" y="334.50">_find_an..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (79 samples, 6.03%)</title><rect x="93.9741%" y="340" width="6.0259%" height="15" fill="rgb(234,103,6)"/><text x="94.2241%" y="350.50">_find_an..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (79 samples, 6.03%)</title><rect x="93.9741%" y="356" width="6.0259%" height="15" fill="rgb(227,97,0)"/><text x="94.2241%" y="366.50">_load_un..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (79 samples, 6.03%)</title><rect x="93.9741%" y="372" width="6.0259%" height="15" fill="rgb(234,150,53)"/><text x="94.2241%" y="382.50">exec_mod..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (79 samples, 6.03%)</title><rect x="93.9741%" y="388" width="6.0259%" height="15" fill="rgb(228,201,54)"/><text x="94.2241%" y="398.50">_call_wi..</text></g></svg></svg>