<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180"><g><title>_signature_from_callable (inspect.py:2247) (10 samples, 1.09%)</title><rect x="1.0941%" y="228" width="1.0941%" height="15" fill="rgb(227,0,7)"/><text x="1.3441%" y="238.50"></text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (14 samples, 1.53%)</title><rect x="1.0941%" y="180" width="1.5317%" height="15" fill="rgb(217,0,24)"/><text x="1.3441%" y="190.50"></text></g><g><title>signature (inspect.py:3118) (14 samples, 1.53%)</title><rect x="1.0941%" y="196" width="1.5317%" height="15" fill="rgb(221,193,54)"/><text x="1.3441%" y="206.50"></text></g><g><title>from_callable (inspect.py:2867) (14 samples, 1.53%)</title><rect x="1.0941%" y="212" width="1.5317%" height="15" fill="rgb(248,212,6)"/><text x="1.3441%" y="222.50"></text></g><g><title>log_events (cyberbrain/frame.py:144) (17 samples, 1.86%)</title><rect x="0.9847%" y="164" width="1.8600%" height="15" fill="rgb(208,68,35)"/><text x="1.2347%" y="174.50">l..</text></g><g><title>update (cyberbrain/logger.py:146) (26 samples, 2.84%)</title><rect x="0.9847%" y="148" width="2.8446%" height="15" fill="rgb(232,128,0)"/><text x="1.2347%" y="158.50">up..</text></g><g><title>main (password.py:82) (40 samples, 4.38%)</title><rect x="0.0000%" y="116" width="4.3764%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="126.50">main ..</text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (32 samples, 3.50%)</title><rect x="0.8753%" y="132" width="3.5011%" height="15" fill="rgb(228,23,34)"/><text x="1.1253%" y="142.50">loc..</text></g><g><title>should_exclude (cyberbrain/utils.py:146) (11 samples, 1.20%)</title><rect x="5.9081%" y="148" width="1.2035%" height="15" fill="rgb(218,30,26)"/><text x="6.1581%" y="158.50"></text></g><g><title>should_exclude (cyberbrain/utils.py:149) (12 samples, 1.31%)</title><rect x="7.1116%" y="148" width="1.3129%" height="15" fill="rgb(220,122,19)"/><text x="7.3616%" y="158.50"></text></g><g><title>local_tracer (cyberbrain/tracer.py:234) (28 samples, 3.06%)</title><rect x="5.7987%" y="132" width="3.0635%" height="15" fill="rgb(250,228,42)"/><text x="6.0487%" y="142.50">loc..</text></g><g><title>update (cyberbrain/logger.py:144) (14 samples, 1.53%)</title><rect x="9.5186%" y="148" width="1.5317%" height="15" fill="rgb(240,193,28)"/><text x="9.7686%" y="158.50"></text></g><g><title>__init__ (inspect.py:2505) (11 samples, 1.20%)</title><rect x="18.2713%" y="276" width="1.2035%" height="15" fill="rgb(216,20,37)"/><text x="18.5213%" y="286.50"></text></g><g><title>_signature_from_function (inspect.py:2182) (24 samples, 2.63%)</title><rect x="17.5055%" y="260" width="2.6258%" height="15" fill="rgb(206,188,39)"/><text x="17.7555%" y="270.50">_s..</text></g><g><title>_signature_from_function (inspect.py:2227) (10 samples, 1.09%)</title><rect x="20.7877%" y="260" width="1.0941%" height="15" fill="rgb(217,207,13)"/><text x="21.0377%" y="270.50"></text></g><g><title>_signature_from_callable (inspect.py:2247) (84 samples, 9.19%)</title><rect x="12.9103%" y="228" width="9.1904%" height="15" fill="rgb(231,73,38)"/><text x="13.1603%" y="238.50">_signature_fr..</text></g><g><title>_signature_from_callable (inspect.py:2318) (55 samples, 6.02%)</title><rect x="16.0832%" y="244" width="6.0175%" height="15" fill="rgb(225,20,46)"/><text x="16.3332%" y="254.50">_signatu..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (120 samples, 13.13%)</title><rect x="12.3632%" y="180" width="13.1291%" height="15" fill="rgb(210,31,41)"/><text x="12.6132%" y="190.50">emit_event_and_updat..</text></g><g><title>signature (inspect.py:3118) (117 samples, 12.80%)</title><rect x="12.6915%" y="196" width="12.8009%" height="15" fill="rgb(221,200,47)"/><text x="12.9415%" y="206.50">signature (inspect...</text></g><g><title>from_callable (inspect.py:2867) (116 samples, 12.69%)</title><rect x="12.8009%" y="212" width="12.6915%" height="15" fill="rgb(226,26,5)"/><text x="13.0509%" y="222.50">from_callable (insp..</text></g><g><title>_signature_from_callable (inspect.py:2254) (30 samples, 3.28%)</title><rect x="22.2101%" y="228" width="3.2823%" height="15" fill="rgb(249,33,26)"/><text x="22.4601%" y="238.50">_si..</text></g><g><title>_signature_bound_method (inspect.py:1849) (18 samples, 1.97%)</title><rect x="23.5230%" y="244" width="1.9694%" height="15" fill="rgb(235,183,28)"/><text x="23.7730%" y="254.50">_..</text></g><g><title>replace (inspect.py:2890) (17 samples, 1.86%)</title><rect x="23.6324%" y="260" width="1.8600%" height="15" fill="rgb(221,5,38)"/><text x="23.8824%" y="270.50">r..</text></g><g><title>_push (cyberbrain/value_stack.py:192) (16 samples, 1.75%)</title><rect x="26.3676%" y="228" width="1.7505%" height="15" fill="rgb(247,18,42)"/><text x="26.6176%" y="238.50"></text></g><g><title>_CALL_FUNCTION_handler (cyberbrain/value_stack.py:509) (29 samples, 3.17%)</title><rect x="26.1488%" y="196" width="3.1729%" height="15" fill="rgb(241,131,45)"/><text x="26.3988%" y="206.50">_CA..</text></g><g><title>_push_arguments_or_exception (cyberbrain/value_stack.py:504) (28 samples, 3.06%)</title><rect x="26.2582%" y="212" width="3.0635%" height="15" fill="rgb(249,31,29)"/><text x="26.5082%" y="222.50">_pu..</text></g><g><title>_LOAD_METHOD_handler (cyberbrain/value_stack.py:494) (10 samples, 1.09%)</title><rect x="30.4158%" y="196" width="1.0941%" height="15" fill="rgb(225,111,53)"/><text x="30.6658%" y="206.50"></text></g><g><title>_push (cyberbrain/value_stack.py:192) (10 samples, 1.09%)</title><rect x="32.0569%" y="228" width="1.0941%" height="15" fill="rgb(238,160,17)"/><text x="32.3069%" y="238.50"></text></g><g><title>_CALL_METHOD_handler (cyberbrain/value_stack.py:530) (17 samples, 1.86%)</title><rect x="31.9475%" y="212" width="1.8600%" height="15" fill="rgb(214,148,48)"/><text x="32.1975%" y="222.50">_..</text></g><g><title>log_events (cyberbrain/frame.py:144) (227 samples, 24.84%)</title><rect x="11.1597%" y="164" width="24.8359%" height="15" fill="rgb(232,36,49)"/><text x="11.4097%" y="174.50">log_events (cyberbrain/frame.py:144)</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:139) (92 samples, 10.07%)</title><rect x="25.9300%" y="180" width="10.0656%" height="15" fill="rgb(209,103,24)"/><text x="26.1800%" y="190.50">emit_event_and_..</text></g><g><title>inner (cyberbrain/value_stack.py:63) (41 samples, 4.49%)</title><rect x="31.5098%" y="196" width="4.4858%" height="15" fill="rgb(229,88,8)"/><text x="31.7598%" y="206.50">inner..</text></g><g><title>log_events (cyberbrain/frame.py:157) (13 samples, 1.42%)</title><rect x="36.6521%" y="164" width="1.4223%" height="15" fill="rgb(213,181,19)"/><text x="36.9021%" y="174.50"></text></g><g><title>to_json (cyberbrain/utils.py:96) (12 samples, 1.31%)</title><rect x="36.7615%" y="180" width="1.3129%" height="15" fill="rgb(254,191,54)"/><text x="37.0115%" y="190.50"></text></g><g><title>log_events (cyberbrain/frame.py:175) (13 samples, 1.42%)</title><rect x="39.0591%" y="164" width="1.4223%" height="15" fill="rgb(241,83,37)"/><text x="39.3091%" y="174.50"></text></g><g><title>__init__ (&lt;attrs generated init cyberbrain.basis.Binding&gt;:9) (11 samples, 1.20%)</title><rect x="39.2779%" y="180" width="1.2035%" height="15" fill="rgb(233,36,39)"/><text x="39.5279%" y="190.50"></text></g><g><title>generate_uuid (cyberbrain/basis.py:39) (11 samples, 1.20%)</title><rect x="39.2779%" y="196" width="1.2035%" height="15" fill="rgb(226,3,54)"/><text x="39.5279%" y="206.50"></text></g><g><title>update (cyberbrain/logger.py:146) (280 samples, 30.63%)</title><rect x="11.0503%" y="148" width="30.6346%" height="15" fill="rgb(245,192,40)"/><text x="11.3003%" y="158.50">update (cyberbrain/logger.py:146)</text></g><g><title>log_initial_value_events (cyberbrain/frame.py:120) (11 samples, 1.20%)</title><rect x="42.1225%" y="164" width="1.2035%" height="15" fill="rgb(238,167,29)"/><text x="42.3725%" y="174.50"></text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (324 samples, 35.45%)</title><rect x="8.8621%" y="132" width="35.4486%" height="15" fill="rgb(232,182,51)"/><text x="9.1121%" y="142.50">local_tracer (cyberbrain/tracer.py:238)</text></g><g><title>update (cyberbrain/logger.py:198) (24 samples, 2.63%)</title><rect x="41.6849%" y="148" width="2.6258%" height="15" fill="rgb(231,60,39)"/><text x="41.9349%" y="158.50">up..</text></g><g><title>main (password.py:83) (367 samples, 40.15%)</title><rect x="4.3764%" y="116" width="40.1532%" height="15" fill="rgb(208,69,12)"/><text x="4.6264%" y="126.50">main (password.py:83)</text></g><g><title>should_exclude (cyberbrain/utils.py:146) (11 samples, 1.20%)</title><rect x="45.0766%" y="148" width="1.2035%" height="15" fill="rgb(235,93,37)"/><text x="45.3266%" y="158.50"></text></g><g><title>local_tracer (cyberbrain/tracer.py:234) (22 samples, 2.41%)</title><rect x="44.7484%" y="132" width="2.4070%" height="15" fill="rgb(213,116,39)"/><text x="44.9984%" y="142.50">lo..</text></g><g><title>_signature_from_callable (inspect.py:2247) (30 samples, 3.28%)</title><rect x="49.0153%" y="228" width="3.2823%" height="15" fill="rgb(222,207,29)"/><text x="49.2653%" y="238.50">_si..</text></g><g><title>_signature_from_callable (inspect.py:2318) (20 samples, 2.19%)</title><rect x="50.1094%" y="244" width="2.1882%" height="15" fill="rgb(206,96,30)"/><text x="50.3594%" y="254.50">_..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:131) (39 samples, 4.27%)</title><rect x="48.6871%" y="180" width="4.2670%" height="15" fill="rgb(218,138,4)"/><text x="48.9371%" y="190.50">emit_..</text></g><g><title>signature (inspect.py:3118) (39 samples, 4.27%)</title><rect x="48.6871%" y="196" width="4.2670%" height="15" fill="rgb(250,191,14)"/><text x="48.9371%" y="206.50">signa..</text></g><g><title>from_callable (inspect.py:2867) (38 samples, 4.16%)</title><rect x="48.7965%" y="212" width="4.1575%" height="15" fill="rgb(239,60,40)"/><text x="49.0465%" y="222.50">from_..</text></g><g><title>_CALL_METHOD_handler (cyberbrain/value_stack.py:530) (13 samples, 1.42%)</title><rect x="54.1575%" y="212" width="1.4223%" height="15" fill="rgb(206,27,48)"/><text x="54.4075%" y="222.50"></text></g><g><title>log_events (cyberbrain/frame.py:144) (74 samples, 8.10%)</title><rect x="47.8118%" y="164" width="8.0963%" height="15" fill="rgb(225,35,8)"/><text x="48.0618%" y="174.50">log_events ..</text></g><g><title>emit_event_and_update_stack (cyberbrain/value_stack.py:139) (27 samples, 2.95%)</title><rect x="52.9540%" y="180" width="2.9540%" height="15" fill="rgb(250,213,24)"/><text x="53.2040%" y="190.50">emi..</text></g><g><title>inner (cyberbrain/value_stack.py:63) (17 samples, 1.86%)</title><rect x="54.0481%" y="196" width="1.8600%" height="15" fill="rgb(247,123,22)"/><text x="54.2981%" y="206.50">i..</text></g><g><title>encode (jsonpickle/pickler.py:128) (29 samples, 3.17%)</title><rect x="56.4551%" y="196" width="3.1729%" height="15" fill="rgb(231,138,38)"/><text x="56.7051%" y="206.50">enc..</text></g><g><title>encode (jsonpickle/backend.py:171) (29 samples, 3.17%)</title><rect x="56.4551%" y="212" width="3.1729%" height="15" fill="rgb(231,145,46)"/><text x="56.7051%" y="222.50">enc..</text></g><g><title>backend_encode (jsonpickle/backend.py:189) (25 samples, 2.74%)</title><rect x="56.8928%" y="228" width="2.7352%" height="15" fill="rgb(251,118,11)"/><text x="57.1428%" y="238.50">ba..</text></g><g><title>dumps (json/__init__.py:231) (24 samples, 2.63%)</title><rect x="57.0022%" y="244" width="2.6258%" height="15" fill="rgb(217,147,25)"/><text x="57.2522%" y="254.50">du..</text></g><g><title>encode (json/encoder.py:199) (24 samples, 2.63%)</title><rect x="57.0022%" y="260" width="2.6258%" height="15" fill="rgb(247,81,37)"/><text x="57.2522%" y="270.50">en..</text></g><g><title>iterencode (json/encoder.py:257) (21 samples, 2.30%)</title><rect x="57.3304%" y="276" width="2.2976%" height="15" fill="rgb(209,12,38)"/><text x="57.5804%" y="286.50">i..</text></g><g><title>_flatten (jsonpickle/pickler.py:263) (41 samples, 4.49%)</title><rect x="63.8950%" y="292" width="4.4858%" height="15" fill="rgb(227,1,9)"/><text x="64.1450%" y="302.50">_flat..</text></g><g><title>is_bytes (jsonpickle/util.py:178) (13 samples, 1.42%)</title><rect x="66.9584%" y="308" width="1.4223%" height="15" fill="rgb(248,47,43)"/><text x="67.2084%" y="318.50"></text></g><g><title>_flatten (jsonpickle/pickler.py:266) (43 samples, 4.70%)</title><rect x="68.3807%" y="292" width="4.7046%" height="15" fill="rgb(221,10,30)"/><text x="68.6307%" y="302.50">_flat..</text></g><g><title>is_primitive (jsonpickle/util.py:131) (15 samples, 1.64%)</title><rect x="71.4442%" y="308" width="1.6411%" height="15" fill="rgb(210,229,1)"/><text x="71.6942%" y="318.50"></text></g><g><title>log_events (cyberbrain/frame.py:157) (156 samples, 17.07%)</title><rect x="56.1269%" y="164" width="17.0678%" height="15" fill="rgb(222,148,37)"/><text x="56.3769%" y="174.50">log_events (cyberbrain/fra..</text></g><g><title>to_json (cyberbrain/utils.py:96) (155 samples, 16.96%)</title><rect x="56.2363%" y="180" width="16.9584%" height="15" fill="rgb(234,67,33)"/><text x="56.4863%" y="190.50">to_json (cyberbrain/utils...</text></g><g><title>encode (jsonpickle/pickler.py:129) (124 samples, 13.57%)</title><rect x="59.6280%" y="196" width="13.5667%" height="15" fill="rgb(247,98,35)"/><text x="59.8780%" y="206.50">encode (jsonpickle/p..</text></g><g><title>flatten (jsonpickle/pickler.py:253) (124 samples, 13.57%)</title><rect x="59.6280%" y="212" width="13.5667%" height="15" fill="rgb(247,138,52)"/><text x="59.8780%" y="222.50">flatten (jsonpickle/..</text></g><g><title>_flatten (jsonpickle/pickler.py:275) (123 samples, 13.46%)</title><rect x="59.7374%" y="228" width="13.4573%" height="15" fill="rgb(213,79,30)"/><text x="59.9874%" y="238.50">_flatten (jsonpickle..</text></g><g><title>_flatten_obj (jsonpickle/pickler.py:298) (121 samples, 13.24%)</title><rect x="59.9562%" y="244" width="13.2385%" height="15" fill="rgb(246,177,23)"/><text x="60.2062%" y="254.50">_flatten_obj (jsonpi..</text></g><g><title>_list_recurse (jsonpickle/pickler.py:309) (121 samples, 13.24%)</title><rect x="59.9562%" y="260" width="13.2385%" height="15" fill="rgb(230,62,27)"/><text x="60.2062%" y="270.50">_list_recurse (jsonp..</text></g><g><title>&lt;listcomp&gt; (jsonpickle/pickler.py:309) (120 samples, 13.13%)</title><rect x="60.0656%" y="276" width="13.1291%" height="15" fill="rgb(216,154,8)"/><text x="60.3156%" y="286.50">&lt;listcomp&gt; (jsonpick..</text></g><g><title>update (cyberbrain/logger.py:146) (260 samples, 28.45%)</title><rect x="47.7024%" y="148" width="28.4464%" height="15" fill="rgb(244,35,45)"/><text x="47.9524%" y="158.50">update (cyberbrain/logger.py:146)</text></g><g><title>main (password.py:84) (300 samples, 32.82%)</title><rect x="44.5295%" y="116" width="32.8228%" height="15" fill="rgb(251,115,12)"/><text x="44.7795%" y="126.50">main (password.py:84)</text></g><g><title>local_tracer (cyberbrain/tracer.py:238) (276 samples, 30.20%)</title><rect x="47.1554%" y="132" width="30.1969%" height="15" fill="rgb(240,54,50)"/><text x="47.4054%" y="142.50">local_tracer (cyberbrain/tracer.py:238)</text></g><g><title>update (cyberbrain/logger.py:198) (11 samples, 1.20%)</title><rect x="76.1488%" y="148" width="1.2035%" height="15" fill="rgb(233,84,52)"/><text x="76.3988%" y="158.50"></text></g><g><title>wrapper (cyberbrain/tracer.py:186) (708 samples, 77.46%)</title><rect x="0.0000%" y="100" width="77.4617%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="110.50">wrapper (cyberbrain/tracer.py:186)</text></g><g><title>_transform_event_to_proto (cyberbrain/rpc_client.py:40) (23 samples, 2.52%)</title><rect x="78.6652%" y="148" width="2.5164%" height="15" fill="rgb(249,43,39)"/><text x="78.9152%" y="158.50">_t..</text></g><g><title>MergeFrom (protobuf/internal/python_message.py:1342) (12 samples, 1.31%)</title><rect x="83.4792%" y="180" width="1.3129%" height="15" fill="rgb(209,38,44)"/><text x="83.7292%" y="190.50"></text></g><g><title>MakeSubMessageDefault (protobuf/internal/python_message.py:465) (10 samples, 1.09%)</title><rect x="83.6980%" y="196" width="1.0941%" height="15" fill="rgb(236,212,23)"/><text x="83.9480%" y="206.50"></text></g><g><title>send_frame (cyberbrain/rpc_client.py:191) (72 samples, 7.88%)</title><rect x="77.6805%" y="132" width="7.8775%" height="15" fill="rgb(242,79,21)"/><text x="77.9305%" y="142.50">send_frame ..</text></g><g><title>append (protobuf/internal/containers.py:388) (22 samples, 2.41%)</title><rect x="83.1510%" y="148" width="2.4070%" height="15" fill="rgb(211,96,35)"/><text x="83.4010%" y="158.50">ap..</text></g><g><title>CopyFrom (protobuf/message.py:129) (21 samples, 2.30%)</title><rect x="83.2604%" y="164" width="2.2976%" height="15" fill="rgb(253,215,40)"/><text x="83.5104%" y="174.50">C..</text></g><g><title>EncodeField (protobuf/internal/encoder.py:827) (17 samples, 1.86%)</title><rect x="87.4179%" y="292" width="1.8600%" height="15" fill="rgb(211,81,21)"/><text x="87.6679%" y="302.50">E..</text></g><g><title>EncodeField (protobuf/internal/encoder.py:828) (10 samples, 1.09%)</title><rect x="89.2779%" y="292" width="1.0941%" height="15" fill="rgb(208,190,38)"/><text x="89.5279%" y="302.50"></text></g><g><title>EncodeRepeatedField (protobuf/internal/encoder.py:762) (13 samples, 1.42%)</title><rect x="90.4814%" y="292" width="1.4223%" height="15" fill="rgb(235,213,38)"/><text x="90.7314%" y="302.50"></text></g><g><title>_blocking (grpc/_channel.py:898) (69 samples, 7.55%)</title><rect x="87.0897%" y="164" width="7.5492%" height="15" fill="rgb(237,122,38)"/><text x="87.3397%" y="174.50">_blocking ..</text></g><g><title>_prepare (grpc/_channel.py:875) (69 samples, 7.55%)</title><rect x="87.0897%" y="180" width="7.5492%" height="15" fill="rgb(244,218,35)"/><text x="87.3397%" y="190.50">_prepare (..</text></g><g><title>_start_unary_request (grpc/_channel.py:808) (69 samples, 7.55%)</title><rect x="87.0897%" y="196" width="7.5492%" height="15" fill="rgb(240,68,47)"/><text x="87.3397%" y="206.50">_start_una..</text></g><g><title>serialize (grpc/_common.py:93) (69 samples, 7.55%)</title><rect x="87.0897%" y="212" width="7.5492%" height="15" fill="rgb(210,16,53)"/><text x="87.3397%" y="222.50">serialize ..</text></g><g><title>_transform (grpc/_common.py:86) (69 samples, 7.55%)</title><rect x="87.0897%" y="228" width="7.5492%" height="15" fill="rgb(235,124,12)"/><text x="87.3397%" y="238.50">_transform..</text></g><g><title>SerializeToString (protobuf/internal/python_message.py:1097) (66 samples, 7.22%)</title><rect x="87.4179%" y="244" width="7.2210%" height="15" fill="rgb(224,169,11)"/><text x="87.6679%" y="254.50">SerializeT..</text></g><g><title>SerializePartialToString (protobuf/internal/python_message.py:1106) (66 samples, 7.22%)</title><rect x="87.4179%" y="260" width="7.2210%" height="15" fill="rgb(250,166,2)"/><text x="87.6679%" y="270.50">SerializeP..</text></g><g><title>InternalSerialize (protobuf/internal/python_message.py:1126) (66 samples, 7.22%)</title><rect x="87.4179%" y="276" width="7.2210%" height="15" fill="rgb(242,216,29)"/><text x="87.6679%" y="286.50">InternalSe..</text></g><g><title>EncodeRepeatedField (protobuf/internal/encoder.py:763) (25 samples, 2.74%)</title><rect x="91.9037%" y="292" width="2.7352%" height="15" fill="rgb(230,116,27)"/><text x="92.1537%" y="302.50">En..</text></g><g><title>InternalSerialize (protobuf/internal/python_message.py:1126) (19 samples, 2.08%)</title><rect x="92.5602%" y="308" width="2.0788%" height="15" fill="rgb(228,99,48)"/><text x="92.8102%" y="318.50">I..</text></g><g><title>EncodeField (protobuf/internal/encoder.py:769) (19 samples, 2.08%)</title><rect x="92.5602%" y="324" width="2.0788%" height="15" fill="rgb(253,11,6)"/><text x="92.8102%" y="334.50">E..</text></g><g><title>&lt;module&gt; (password.py:120) (866 samples, 94.75%)</title><rect x="0.0000%" y="84" width="94.7484%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="94.50">&lt;module&gt; (password.py:120)</text></g><g><title>wrapper (cyberbrain/tracer.py:195) (158 samples, 17.29%)</title><rect x="77.4617%" y="100" width="17.2867%" height="15" fill="rgb(236,97,10)"/><text x="77.7117%" y="110.50">wrapper (cyberbrain/tracer...</text></g><g><title>stop (cyberbrain/tracer.py:145) (158 samples, 17.29%)</title><rect x="77.4617%" y="116" width="17.2867%" height="15" fill="rgb(233,208,19)"/><text x="77.7117%" y="126.50">stop (cyberbrain/tracer.py:..</text></g><g><title>send_frame (cyberbrain/rpc_client.py:197) (70 samples, 7.66%)</title><rect x="87.0897%" y="132" width="7.6586%" height="15" fill="rgb(216,164,2)"/><text x="87.3397%" y="142.50">send_frame..</text></g><g><title>__call__ (grpc/_channel.py:921) (70 samples, 7.66%)</title><rect x="87.0897%" y="148" width="7.6586%" height="15" fill="rgb(220,129,5)"/><text x="87.3397%" y="158.50">__call__ (..</text></g><g><title>&lt;module&gt; (cyberbrain/tracer.py:11) (15 samples, 1.64%)</title><rect x="94.7484%" y="276" width="1.6411%" height="15" fill="rgb(242,17,10)"/><text x="94.9984%" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (15 samples, 1.64%)</title><rect x="94.7484%" y="292" width="1.6411%" height="15" fill="rgb(242,107,0)"/><text x="94.9984%" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (15 samples, 1.64%)</title><rect x="94.7484%" y="308" width="1.6411%" height="15" fill="rgb(251,28,31)"/><text x="94.9984%" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (15 samples, 1.64%)</title><rect x="94.7484%" y="324" width="1.6411%" height="15" fill="rgb(233,223,10)"/><text x="94.9984%" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (15 samples, 1.64%)</title><rect x="94.7484%" y="340" width="1.6411%" height="15" fill="rgb(215,21,27)"/><text x="94.9984%" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (15 samples, 1.64%)</title><rect x="94.7484%" y="356" width="1.6411%" height="15" fill="rgb(232,23,21)"/><text x="94.9984%" y="366.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:11) (11 samples, 1.20%)</title><rect x="96.9365%" y="900" width="1.2035%" height="15" fill="rgb(244,5,23)"/><text x="97.1865%" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (11 samples, 1.20%)</title><rect x="96.9365%" y="916" width="1.2035%" height="15" fill="rgb(226,81,46)"/><text x="97.1865%" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (11 samples, 1.20%)</title><rect x="96.9365%" y="932" width="1.2035%" height="15" fill="rgb(247,70,30)"/><text x="97.1865%" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (11 samples, 1.20%)</title><rect x="96.9365%" y="948" width="1.2035%" height="15" fill="rgb(212,68,19)"/><text x="97.1865%" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (11 samples, 1.20%)</title><rect x="96.9365%" y="964" width="1.2035%" height="15" fill="rgb(240,187,13)"/><text x="97.1865%" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (11 samples, 1.20%)</title><rect x="96.9365%" y="980" width="1.2035%" height="15" fill="rgb(223,113,26)"/><text x="97.1865%" y="990.50"></text></g><g><title>&lt;module&gt; (cyberbrain/utils.py:20) (22 samples, 2.41%)</title><rect x="96.9365%" y="532" width="2.4070%" height="15" fill="rgb(206,192,2)"/><text x="97.1865%" y="542.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (22 samples, 2.41%)</title><rect x="96.9365%" y="548" width="2.4070%" height="15" fill="rgb(241,108,4)"/><text x="97.1865%" y="558.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (22 samples, 2.41%)</title><rect x="96.9365%" y="564" width="2.4070%" height="15" fill="rgb(247,173,49)"/><text x="97.1865%" y="574.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (22 samples, 2.41%)</title><rect x="96.9365%" y="580" width="2.4070%" height="15" fill="rgb(224,114,35)"/><text x="97.1865%" y="590.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (22 samples, 2.41%)</title><rect x="96.9365%" y="596" width="2.4070%" height="15" fill="rgb(245,159,27)"/><text x="97.1865%" y="606.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (22 samples, 2.41%)</title><rect x="96.9365%" y="612" width="2.4070%" height="15" fill="rgb(245,172,44)"/><text x="97.1865%" y="622.50">_c..</text></g><g><title>&lt;module&gt; (cheap_repr/__init__.py:94) (22 samples, 2.41%)</title><rect x="96.9365%" y="628" width="2.4070%" height="15" fill="rgb(236,23,11)"/><text x="97.1865%" y="638.50">&lt;m..</text></g><g><title>try_register_repr (cheap_repr/__init__.py:57) (22 samples, 2.41%)</title><rect x="96.9365%" y="644" width="2.4070%" height="15" fill="rgb(205,117,38)"/><text x="97.1865%" y="654.50">tr..</text></g><g><title>import_module (importlib/__init__.py:127) (22 samples, 2.41%)</title><rect x="96.9365%" y="660" width="2.4070%" height="15" fill="rgb(237,72,25)"/><text x="97.1865%" y="670.50">im..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (22 samples, 2.41%)</title><rect x="96.9365%" y="676" width="2.4070%" height="15" fill="rgb(244,70,9)"/><text x="97.1865%" y="686.50">_g..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (22 samples, 2.41%)</title><rect x="96.9365%" y="692" width="2.4070%" height="15" fill="rgb(217,125,39)"/><text x="97.1865%" y="702.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:972) (22 samples, 2.41%)</title><rect x="96.9365%" y="708" width="2.4070%" height="15" fill="rgb(235,36,10)"/><text x="97.1865%" y="718.50">_f..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (22 samples, 2.41%)</title><rect x="96.9365%" y="724" width="2.4070%" height="15" fill="rgb(251,123,47)"/><text x="97.1865%" y="734.50">_c..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (22 samples, 2.41%)</title><rect x="96.9365%" y="740" width="2.4070%" height="15" fill="rgb(221,13,13)"/><text x="97.1865%" y="750.50">_g..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (22 samples, 2.41%)</title><rect x="96.9365%" y="756" width="2.4070%" height="15" fill="rgb(238,131,9)"/><text x="97.1865%" y="766.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:972) (22 samples, 2.41%)</title><rect x="96.9365%" y="772" width="2.4070%" height="15" fill="rgb(211,50,8)"/><text x="97.1865%" y="782.50">_f..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (22 samples, 2.41%)</title><rect x="96.9365%" y="788" width="2.4070%" height="15" fill="rgb(245,182,24)"/><text x="97.1865%" y="798.50">_c..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1030) (22 samples, 2.41%)</title><rect x="96.9365%" y="804" width="2.4070%" height="15" fill="rgb(242,14,37)"/><text x="97.1865%" y="814.50">_g..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (22 samples, 2.41%)</title><rect x="96.9365%" y="820" width="2.4070%" height="15" fill="rgb(246,228,12)"/><text x="97.1865%" y="830.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (22 samples, 2.41%)</title><rect x="96.9365%" y="836" width="2.4070%" height="15" fill="rgb(213,55,15)"/><text x="97.1865%" y="846.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (22 samples, 2.41%)</title><rect x="96.9365%" y="852" width="2.4070%" height="15" fill="rgb(209,9,3)"/><text x="97.1865%" y="862.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (22 samples, 2.41%)</title><rect x="96.9365%" y="868" width="2.4070%" height="15" fill="rgb(230,59,30)"/><text x="97.1865%" y="878.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (22 samples, 2.41%)</title><rect x="96.9365%" y="884" width="2.4070%" height="15" fill="rgb(209,121,21)"/><text x="97.1865%" y="894.50">_c..</text></g><g><title>&lt;module&gt; (cyberbrain/logger.py:9) (27 samples, 2.95%)</title><rect x="96.6083%" y="404" width="2.9540%" height="15" fill="rgb(220,109,13)"/><text x="96.8583%" y="414.50">&lt;mo..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (27 samples, 2.95%)</title><rect x="96.6083%" y="420" width="2.9540%" height="15" fill="rgb(232,18,1)"/><text x="96.8583%" y="430.50">_ha..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (27 samples, 2.95%)</title><rect x="96.6083%" y="436" width="2.9540%" height="15" fill="rgb(215,41,42)"/><text x="96.8583%" y="446.50">_ca..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (27 samples, 2.95%)</title><rect x="96.6083%" y="452" width="2.9540%" height="15" fill="rgb(224,123,36)"/><text x="96.8583%" y="462.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (27 samples, 2.95%)</title><rect x="96.6083%" y="468" width="2.9540%" height="15" fill="rgb(240,125,3)"/><text x="96.8583%" y="478.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (27 samples, 2.95%)</title><rect x="96.6083%" y="484" width="2.9540%" height="15" fill="rgb(205,98,50)"/><text x="96.8583%" y="494.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (27 samples, 2.95%)</title><rect x="96.6083%" y="500" width="2.9540%" height="15" fill="rgb(205,185,37)"/><text x="96.8583%" y="510.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (27 samples, 2.95%)</title><rect x="96.6083%" y="516" width="2.9540%" height="15" fill="rgb(238,207,15)"/><text x="96.8583%" y="526.50">_ca..</text></g><g><title>&lt;module&gt; (cyberbrain/tracer.py:13) (32 samples, 3.50%)</title><rect x="96.3895%" y="276" width="3.5011%" height="15" fill="rgb(213,199,42)"/><text x="96.6395%" y="286.50">&lt;mo..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (32 samples, 3.50%)</title><rect x="96.3895%" y="292" width="3.5011%" height="15" fill="rgb(235,201,11)"/><text x="96.6395%" y="302.50">_ha..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (32 samples, 3.50%)</title><rect x="96.3895%" y="308" width="3.5011%" height="15" fill="rgb(207,46,11)"/><text x="96.6395%" y="318.50">_ca..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (32 samples, 3.50%)</title><rect x="96.3895%" y="324" width="3.5011%" height="15" fill="rgb(241,35,35)"/><text x="96.6395%" y="334.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (32 samples, 3.50%)</title><rect x="96.3895%" y="340" width="3.5011%" height="15" fill="rgb(243,32,47)"/><text x="96.6395%" y="350.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (32 samples, 3.50%)</title><rect x="96.3895%" y="356" width="3.5011%" height="15" fill="rgb(247,202,23)"/><text x="96.6395%" y="366.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (32 samples, 3.50%)</title><rect x="96.3895%" y="372" width="3.5011%" height="15" fill="rgb(219,102,11)"/><text x="96.6395%" y="382.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (32 samples, 3.50%)</title><rect x="96.3895%" y="388" width="3.5011%" height="15" fill="rgb(243,110,44)"/><text x="96.6395%" y="398.50">_ca..</text></g><g><title>all (914 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="46.50"></text></g><g><title>_run_module_as_main (runpy.py:197) (914 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="62.50">_run_module_as_main (runpy.py:197)</text></g><g><title>_run_code (runpy.py:87) (914 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="78.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (password.py:9) (48 samples, 5.25%)</title><rect x="94.7484%" y="84" width="5.2516%" height="15" fill="rgb(217,163,10)"/><text x="94.9984%" y="94.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (48 samples, 5.25%)</title><rect x="94.7484%" y="100" width="5.2516%" height="15" fill="rgb(213,25,53)"/><text x="94.9984%" y="110.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (48 samples, 5.25%)</title><rect x="94.7484%" y="116" width="5.2516%" height="15" fill="rgb(252,105,26)"/><text x="94.9984%" y="126.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (48 samples, 5.25%)</title><rect x="94.7484%" y="132" width="5.2516%" height="15" fill="rgb(220,39,43)"/><text x="94.9984%" y="142.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (48 samples, 5.25%)</title><rect x="94.7484%" y="148" width="5.2516%" height="15" fill="rgb(229,68,48)"/><text x="94.9984%" y="158.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (48 samples, 5.25%)</title><rect x="94.7484%" y="164" width="5.2516%" height="15" fill="rgb(252,8,32)"/><text x="94.9984%" y="174.50">_call_..</text></g><g><title>&lt;module&gt; (cyberbrain/__init__.py:2) (48 samples, 5.25%)</title><rect x="94.7484%" y="180" width="5.2516%" height="15" fill="rgb(223,20,43)"/><text x="94.9984%" y="190.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (48 samples, 5.25%)</title><rect x="94.7484%" y="196" width="5.2516%" height="15" fill="rgb(229,81,49)"/><text x="94.9984%" y="206.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (48 samples, 5.25%)</title><rect x="94.7484%" y="212" width="5.2516%" height="15" fill="rgb(236,28,36)"/><text x="94.9984%" y="222.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (48 samples, 5.25%)</title><rect x="94.7484%" y="228" width="5.2516%" height="15" fill="rgb(249,185,26)"/><text x="94.9984%" y="238.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (48 samples, 5.25%)</title><rect x="94.7484%" y="244" width="5.2516%" height="15" fill="rgb(249,174,33)"/><text x="94.9984%" y="254.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (48 samples, 5.25%)</title><rect x="94.7484%" y="260" width="5.2516%" height="15" fill="rgb(233,201,37)"/><text x="94.9984%" y="270.50">_call_..</text></g></svg></svg>